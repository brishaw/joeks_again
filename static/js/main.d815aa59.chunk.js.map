{"version":3,"sources":["Components/Header.js","Components/Riddles.js","Components/Dad.js","Components/Norris.js","Components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Component","console","log","Riddles","state","question","answer","handleClick","e","preventDefault","axios","get","then","response","q","i","Math","floor","random","length","j","_this","setState","data","jokes","title","catch","error","_this2","this","onClick","Dad","joke","Norris","Footer","App","Components_Header","Components_Riddles","Components_Dad","Components_Norris","Components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d815aa59.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Styles/Header.css';\n\nclass Header extends Component {\n\n  render() {\n    return (\n      <header className=\"header\"></header>\n    )\n  }\n}\n\nexport default Header;","\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport './Styles/Riddles.css';\n\nconsole.log('at test js...');\n\nclass Riddles extends Component {\n  state = {\n    question: '',\n    answer: ''\n  }\n  \n  componentDidMount() {\n    axios.get('/api/riddles/')\n      .then(response => {\n        let q = [0, 3, 6, 9, 12];\n        let i = q[Math.floor(Math.random() * q.length)];\n        let j = i + 1;\n        this.setState({\n          question: response.data.jokes[i].title,\n          answer: response.data.jokes[j].title\n        })\n      })\n      .catch(error => console.log(error));\n  }\n\n  handleClick = (e) => {\n    e.preventDefault();\n    axios.get('/api/riddles/')\n      .then(response => {\n        let q = [0, 3, 6, 9, 12];\n        let i = q[Math.floor(Math.random() * q.length)];\n        let j = i + 1;\n        this.setState({\n          question: response.data.jokes[i].title,\n          answer: response.data.jokes[j].title\n        })\n      })\n      .catch(error => console.log(error));\n  }\n\n  render() {\n    return (\n      <div className=\"right\">\n        <p>A Riddle</p>\n        <p>{this.state.question}</p>\n        <div className=\"riddle-answer-box\"></div>\n        <p className=\"riddle-answer\">{this.state.answer}</p>\n        <button className=\"joke-btn\" onClick={this.handleClick} />\n      </div>\n    )\n  }\n}\n\nexport default Riddles;\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass Dad extends Component {\n  state = {\n    question: '',\n    answer: ''\n  }\n\n  componentDidMount() {\n    axios.get('/api/dadjokes')\n      .then(response => {\n        this.setState({\n          question: response.data.joke\n        })\n      })\n      .catch(error => console.log(error));\n  }\n\n  render() {\n    return (\n      <div className=\"middle\">\n        <p>The Dad Jokes</p>\n        <p>{this.state.question}</p>\n      </div>\n    )\n  }\n}\n\nexport default Dad;","import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass Norris extends Component {\n  state = {\n    question: '',\n    answer: ''\n  }\n\n  componentDidMount() {\n    axios.get('/api/chuckjokes/')\n    .then(response => {\n      console.log(response.data.joke);\n      this.setState({\n        question: response.data.joke\n      })\n    })\n    .catch(error => console.log(error));\n  }\n\n  \n    handleClick = (e) => {\n      e.preventDefault();\n      this.setState({\n        question: ''\n      })\n      \n      axios.get('/api/chuckjokes/')\n        .then(response => {\n          console.log(response.data.joke);\n          this.setState({\n            question: response.data.joke\n          })\n        })\n        .catch(error => console.log(error));\n    }\n  \n\n  render() {\n    return (\n      <div className=\"left\">\n        <p>Chuck Norris Jokes</p>\n        <p>{this.state.question}</p>\n        <button className=\"joke-btn\" onClick={this.handleClick} />\n      </div>\n    )\n  }\n}\n\nexport default Norris;","import React, { Component } from 'react';\nimport './Styles/Footer.css';\n\nclass Footer extends Component {\n\n  render() {\n    return (\n      <footer className=\"footer\"></footer>\n    )\n  }\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport './Components/Styles/App.css';\nimport Header from './Components/Header';\nimport Riddles from './Components/Riddles';\nimport Dad from './Components/Dad';\nimport Norris from './Components/Norris';\nimport Footer from './Components/Footer';\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App grid\">\n        <Header />\n        <Riddles />\n        <Dad />\n        <Norris />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}